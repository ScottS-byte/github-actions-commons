data "aws_security_group" "ec2_security_group" {
  id = aws_security_group.ec2_security_group.id
}

data "aws_vpc" "default" {
  default = true
}

resource "aws_security_group" "ec2_security_group" {
  name        = var.security_group_name
  description = "SG for ${var.aws_resource_identifier}"
  vpc_id      = data.aws_vpc.default.id
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  tags = {
    Name = "${var.aws_resource_identifier}-instance-sg"
  }
}

resource "aws_security_group_rule" "ingress_ssh" {
  type        = "ingress"
  description = "SSH"
  from_port   = 22
  to_port     = 22
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.ec2_security_group.id
}

resource "aws_security_group_rule" "incoming_ports" {
  count       = length(local.incoming_ports) != 0 ? length(local.incoming_ports) : 0
  type        = "ingress"
  from_port   = local.incoming_ports[count.index]
  to_port     = local.incoming_ports[count.index]
  protocol    = "tcp"
  cidr_blocks = ["0.0.0.0/0"]
  security_group_id = aws_security_group.ec2_security_group.id
}

locals {
  incoming_ports = length(var.aws_ec2_port_list) == 0 ? (var.aws_elb_listen_port != "" ? tolist(var.aws_elb_listen_port) : [] ) : var.aws_ec2_port_list
}